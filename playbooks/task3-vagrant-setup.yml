---
- name: "Task 3: Setup Vagrant VM on first site2 host"
  hosts: site2-host5
  become: yes
  gather_facts: yes
  
  vars:
    vagrant_dir: "/home/{{ ansible_user }}/vagrant-vm"
    
  tasks:
    - name: Install required packages for virtualization
      apt:
        name:
          - virtualbox
          - vagrant
          - python3-pip
          - curl
          - wget
        state: present
        update_cache: yes
      tags: ['install']

    - name: Get system memory information
      shell: |
        total_mem=$(free -m | awk 'NR==2{printf "%d", $2}')
        half_mem=$(($total_mem / 2))
        echo $half_mem
      register: system_memory
      changed_when: false
      tags: ['memory']

    - name: Display calculated memory
      debug:
        msg: "System has {{ (ansible_memtotal_mb) }}MB total, will allocate {{ system_memory.stdout }}MB to VM"
      tags: ['memory']

    - name: Create vagrant directory
      file:
        path: "{{ vagrant_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      tags: ['setup']

    - name: Create Vagrantfile for nested VM
      template:
        src: Vagrantfile.j2
        dest: "{{ vagrant_dir }}/Vagrantfile"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      tags: ['setup']

    - name: Template for Vagrantfile
      copy:
        content: |
          # -*- mode: ruby -*-
          # vi: set ft=ruby :
          
          Vagrant.configure("2") do |config|
            config.vm.box = "ubuntu/focal64"
            
            config.vm.provider "virtualbox" do |vb|
              vb.memory = "{{ system_memory.stdout }}"
              vb.cpus = 2
              vb.name = "nested-vm-ansible"
            end
            
            config.vm.network "private_network", type: "dhcp"
            
            config.vm.provision "shell", inline: <<-SHELL
              # Update system
              apt-get update
              
              # Install Python for Ansible
              apt-get install -y python3 python3-pip openssh-server
              
              # Enable SSH service
              systemctl enable ssh
              systemctl start ssh
              
              # Setup SSH for ansible connection
              mkdir -p /home/vagrant/.ssh
              chmod 700 /home/vagrant/.ssh
              
              # Allow passwordless sudo for vagrant user
              echo "vagrant ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
              
              # Install netcat for task 4
              apt-get install -y netcat-openbsd
            SHELL
          end
        dest: "{{ vagrant_dir }}/Vagrantfile"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
      tags: ['setup']

    - name: Start Vagrant VM
      shell: |
        cd {{ vagrant_dir }}
        vagrant up
      become_user: "{{ ansible_user }}"
      register: vagrant_up
      tags: ['start']

    - name: Get Vagrant VM SSH config
      shell: |
        cd {{ vagrant_dir }}
        vagrant ssh-config
      become_user: "{{ ansible_user }}"
      register: vagrant_ssh_config
      tags: ['info']

    - name: Display Vagrant SSH configuration
      debug:
        var: vagrant_ssh_config.stdout_lines
      tags: ['info']

    - name: Get VM IP address
      shell: |
        cd {{ vagrant_dir }}
        vagrant ssh -c "ip addr show | grep 'inet 192' | awk '{print \$2}' | cut -d/ -f1" 2>/dev/null | tail -1
      become_user: "{{ ansible_user }}"
      register: vm_ip
      tags: ['info']

    - name: Display VM connection information
      debug:
        msg: |
          Vagrant VM is running!
          VM IP: {{ vm_ip.stdout }}
          To connect via Ansible, add this to your inventory:
          nested-vm:
            ansible_host: {{ vm_ip.stdout }}
            ansible_user: vagrant
            ansible_ssh_private_key_file: {{ vagrant_dir }}/.vagrant/machines/default/virtualbox/private_key
      tags: ['info']
